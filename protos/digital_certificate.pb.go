// Code generated by protoc-gen-go. DO NOT EDIT.
// source: digital_certificate.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RawCertificateSignatureAlgorithm int32

const (
	RawCertificate_RSA RawCertificateSignatureAlgorithm = 0
)

var RawCertificateSignatureAlgorithm_name = map[int32]string{
	0: "RSA",
}

var RawCertificateSignatureAlgorithm_value = map[string]int32{
	"RSA": 0,
}

func (x RawCertificateSignatureAlgorithm) String() string {
	return proto.EnumName(RawCertificateSignatureAlgorithm_name, int32(x))
}

func (RawCertificateSignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{1, 0}
}

type RawCertificatePublicKeyAlgorithm int32

const (
	RawCertificate_rsaEncryption RawCertificatePublicKeyAlgorithm = 0
)

var RawCertificatePublicKeyAlgorithm_name = map[int32]string{
	0: "rsaEncryption",
}

var RawCertificatePublicKeyAlgorithm_value = map[string]int32{
	"rsaEncryption": 0,
}

func (x RawCertificatePublicKeyAlgorithm) String() string {
	return proto.EnumName(RawCertificatePublicKeyAlgorithm_name, int32(x))
}

func (RawCertificatePublicKeyAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{1, 1}
}

type Certificate struct {
	RawCertificate       *RawCertificate `protobuf:"bytes,1,opt,name=rawCertificate,proto3" json:"rawCertificate,omitempty"`
	Signatures           []*Signature    `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{0}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetRawCertificate() *RawCertificate {
	if m != nil {
		return m.RawCertificate
	}
	return nil
}

func (m *Certificate) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type RawCertificate struct {
	Version      int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	SerialNumber []byte `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	//删除该字段，避免在新节点加入时导致所有证书需要重新生成;Issuers will be the whole network nodes
	//repeated bytes issuers = 3;
	ValidFrom            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidTo              *timestamp.Timestamp `protobuf:"bytes,4,opt,name=valid_to,json=validTo,proto3" json:"valid_to,omitempty"`
	Subject              *Subject             `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	PublicKey            *PublicKey           `protobuf:"bytes,6,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Addr                 *Addr                `protobuf:"bytes,7,opt,name=addr,proto3" json:"addr,omitempty"`
	NetworkSize          int64                `protobuf:"varint,8,opt,name=networkSize,proto3" json:"networkSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RawCertificate) Reset()         { *m = RawCertificate{} }
func (m *RawCertificate) String() string { return proto.CompactTextString(m) }
func (*RawCertificate) ProtoMessage()    {}
func (*RawCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{1}
}

func (m *RawCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawCertificate.Unmarshal(m, b)
}
func (m *RawCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawCertificate.Marshal(b, m, deterministic)
}
func (m *RawCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawCertificate.Merge(m, src)
}
func (m *RawCertificate) XXX_Size() int {
	return xxx_messageInfo_RawCertificate.Size(m)
}
func (m *RawCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_RawCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_RawCertificate proto.InternalMessageInfo

func (m *RawCertificate) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RawCertificate) GetSerialNumber() []byte {
	if m != nil {
		return m.SerialNumber
	}
	return nil
}

func (m *RawCertificate) GetValidFrom() *timestamp.Timestamp {
	if m != nil {
		return m.ValidFrom
	}
	return nil
}

func (m *RawCertificate) GetValidTo() *timestamp.Timestamp {
	if m != nil {
		return m.ValidTo
	}
	return nil
}

func (m *RawCertificate) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *RawCertificate) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *RawCertificate) GetAddr() *Addr {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *RawCertificate) GetNetworkSize() int64 {
	if m != nil {
		return m.NetworkSize
	}
	return 0
}

type Subject struct {
	Country              []string `protobuf:"bytes,1,rep,name=Country,proto3" json:"Country,omitempty"`
	Organization         []string `protobuf:"bytes,2,rep,name=Organization,proto3" json:"Organization,omitempty"`
	OrganizationalUnit   []string `protobuf:"bytes,3,rep,name=OrganizationalUnit,proto3" json:"OrganizationalUnit,omitempty"`
	Locality             []string `protobuf:"bytes,4,rep,name=Locality,proto3" json:"Locality,omitempty"`
	Province             []string `protobuf:"bytes,5,rep,name=Province,proto3" json:"Province,omitempty"`
	StreetAddress        []string `protobuf:"bytes,6,rep,name=StreetAddress,proto3" json:"StreetAddress,omitempty"`
	PostalCode           []string `protobuf:"bytes,7,rep,name=PostalCode,proto3" json:"PostalCode,omitempty"`
	SerialNumber         string   `protobuf:"bytes,8,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	CommonName           string   `protobuf:"bytes,9,opt,name=CommonName,proto3" json:"CommonName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subject) Reset()         { *m = Subject{} }
func (m *Subject) String() string { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()    {}
func (*Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{2}
}

func (m *Subject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subject.Unmarshal(m, b)
}
func (m *Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subject.Marshal(b, m, deterministic)
}
func (m *Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subject.Merge(m, src)
}
func (m *Subject) XXX_Size() int {
	return xxx_messageInfo_Subject.Size(m)
}
func (m *Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_Subject proto.InternalMessageInfo

func (m *Subject) GetCountry() []string {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Subject) GetOrganization() []string {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *Subject) GetOrganizationalUnit() []string {
	if m != nil {
		return m.OrganizationalUnit
	}
	return nil
}

func (m *Subject) GetLocality() []string {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *Subject) GetProvince() []string {
	if m != nil {
		return m.Province
	}
	return nil
}

func (m *Subject) GetStreetAddress() []string {
	if m != nil {
		return m.StreetAddress
	}
	return nil
}

func (m *Subject) GetPostalCode() []string {
	if m != nil {
		return m.PostalCode
	}
	return nil
}

func (m *Subject) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Subject) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

type Signature struct {
	Subject              *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{3}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type PublicKey struct {
	N                    []byte   `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	E                    int64    `protobuf:"varint,2,opt,name=E,proto3" json:"E,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{4}
}

func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *PublicKey) GetE() int64 {
	if m != nil {
		return m.E
	}
	return 0
}

type Addr struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Addr) Reset()         { *m = Addr{} }
func (m *Addr) String() string { return proto.CompactTextString(m) }
func (*Addr) ProtoMessage()    {}
func (*Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{5}
}

func (m *Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Addr.Unmarshal(m, b)
}
func (m *Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Addr.Marshal(b, m, deterministic)
}
func (m *Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addr.Merge(m, src)
}
func (m *Addr) XXX_Size() int {
	return xxx_messageInfo_Addr.Size(m)
}
func (m *Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_Addr.DiscardUnknown(m)
}

var xxx_messageInfo_Addr proto.InternalMessageInfo

func (m *Addr) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Addr) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AuditResult struct {
	Cert                 *Certificate `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Result               bool         `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Subject              *Subject     `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AuditResult) Reset()         { *m = AuditResult{} }
func (m *AuditResult) String() string { return proto.CompactTextString(m) }
func (*AuditResult) ProtoMessage()    {}
func (*AuditResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{6}
}

func (m *AuditResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuditResult.Unmarshal(m, b)
}
func (m *AuditResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuditResult.Marshal(b, m, deterministic)
}
func (m *AuditResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditResult.Merge(m, src)
}
func (m *AuditResult) XXX_Size() int {
	return xxx_messageInfo_AuditResult.Size(m)
}
func (m *AuditResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditResult.DiscardUnknown(m)
}

var xxx_messageInfo_AuditResult proto.InternalMessageInfo

func (m *AuditResult) GetCert() *Certificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *AuditResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *AuditResult) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

type AuditRequest struct {
	Cert                 *Certificate `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Allow                bool         `protobuf:"varint,2,opt,name=allow,proto3" json:"allow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AuditRequest) Reset()         { *m = AuditRequest{} }
func (m *AuditRequest) String() string { return proto.CompactTextString(m) }
func (*AuditRequest) ProtoMessage()    {}
func (*AuditRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{7}
}

func (m *AuditRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuditRequest.Unmarshal(m, b)
}
func (m *AuditRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuditRequest.Marshal(b, m, deterministic)
}
func (m *AuditRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditRequest.Merge(m, src)
}
func (m *AuditRequest) XXX_Size() int {
	return xxx_messageInfo_AuditRequest.Size(m)
}
func (m *AuditRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuditRequest proto.InternalMessageInfo

func (m *AuditRequest) GetCert() *Certificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *AuditRequest) GetAllow() bool {
	if m != nil {
		return m.Allow
	}
	return false
}

type Reserved struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reserved) Reset()         { *m = Reserved{} }
func (m *Reserved) String() string { return proto.CompactTextString(m) }
func (*Reserved) ProtoMessage()    {}
func (*Reserved) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd3b07dc7a0789f3, []int{8}
}

func (m *Reserved) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reserved.Unmarshal(m, b)
}
func (m *Reserved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reserved.Marshal(b, m, deterministic)
}
func (m *Reserved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reserved.Merge(m, src)
}
func (m *Reserved) XXX_Size() int {
	return xxx_messageInfo_Reserved.Size(m)
}
func (m *Reserved) XXX_DiscardUnknown() {
	xxx_messageInfo_Reserved.DiscardUnknown(m)
}

var xxx_messageInfo_Reserved proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protos.RawCertificateSignatureAlgorithm", RawCertificateSignatureAlgorithm_name, RawCertificateSignatureAlgorithm_value)
	proto.RegisterEnum("protos.RawCertificatePublicKeyAlgorithm", RawCertificatePublicKeyAlgorithm_name, RawCertificatePublicKeyAlgorithm_value)
	proto.RegisterType((*Certificate)(nil), "protos.Certificate")
	proto.RegisterType((*RawCertificate)(nil), "protos.RawCertificate")
	proto.RegisterType((*Subject)(nil), "protos.Subject")
	proto.RegisterType((*Signature)(nil), "protos.Signature")
	proto.RegisterType((*PublicKey)(nil), "protos.PublicKey")
	proto.RegisterType((*Addr)(nil), "protos.Addr")
	proto.RegisterType((*AuditResult)(nil), "protos.AuditResult")
	proto.RegisterType((*AuditRequest)(nil), "protos.AuditRequest")
	proto.RegisterType((*Reserved)(nil), "protos.Reserved")
}

func init() { proto.RegisterFile("digital_certificate.proto", fileDescriptor_bd3b07dc7a0789f3) }

var fileDescriptor_bd3b07dc7a0789f3 = []byte{
	// 760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x51, 0x8f, 0xda, 0x46,
	0x10, 0x3e, 0x63, 0xee, 0xc0, 0x83, 0x8f, 0xde, 0x6d, 0x50, 0xb4, 0x45, 0x55, 0x8a, 0xdc, 0x4a,
	0x21, 0x7d, 0x20, 0xe9, 0x55, 0x51, 0x9b, 0x97, 0x48, 0x08, 0x5d, 0xab, 0xa8, 0x2d, 0x45, 0xcb,
	0xe5, 0x19, 0x2d, 0x78, 0x8f, 0xdb, 0xc6, 0xf6, 0xba, 0xbb, 0x6b, 0x10, 0x79, 0xea, 0x1f, 0xea,
	0x0f, 0xa8, 0xfa, 0xe7, 0x2a, 0x8f, 0xb1, 0x31, 0x29, 0x6a, 0xda, 0x27, 0x3c, 0xdf, 0x7c, 0xdf,
	0xcc, 0xce, 0xe7, 0x61, 0x0d, 0x9f, 0x86, 0x72, 0x2d, 0x2d, 0x8f, 0x16, 0x2b, 0xa1, 0xad, 0xbc,
	0x97, 0x2b, 0x6e, 0xc5, 0x28, 0xd5, 0xca, 0x2a, 0x72, 0x81, 0x3f, 0xa6, 0xff, 0xf9, 0x5a, 0xa9,
	0x75, 0x24, 0x9e, 0x63, 0xb8, 0xcc, 0xee, 0x9f, 0x5b, 0x19, 0x0b, 0x63, 0x79, 0x9c, 0x16, 0xc4,
	0xe0, 0x77, 0x07, 0x3a, 0x93, 0x83, 0x9c, 0xbc, 0x86, 0xae, 0xe6, 0xdb, 0x1a, 0x42, 0x9d, 0x81,
	0x33, 0xec, 0xdc, 0x3c, 0x2e, 0xf8, 0x66, 0xc4, 0x8e, 0xb2, 0xec, 0x03, 0x36, 0xf9, 0x1a, 0xc0,
	0xc8, 0x75, 0xc2, 0x6d, 0xa6, 0x85, 0xa1, 0x8d, 0x81, 0x3b, 0xec, 0xdc, 0x5c, 0x97, 0xda, 0x79,
	0x99, 0x61, 0x35, 0x52, 0xf0, 0x87, 0x0b, 0xdd, 0xe3, 0xaa, 0x84, 0x42, 0x6b, 0x23, 0xb4, 0x91,
	0x2a, 0xc1, 0xf6, 0x2e, 0x2b, 0x43, 0xf2, 0x05, 0x5c, 0x1a, 0xa1, 0x25, 0x8f, 0x16, 0x49, 0x16,
	0x2f, 0x85, 0xa6, 0x8d, 0x81, 0x33, 0xf4, 0x99, 0x5f, 0x80, 0x53, 0xc4, 0xc8, 0x2b, 0x80, 0x0d,
	0x8f, 0x64, 0xb8, 0xb8, 0xd7, 0x2a, 0xa6, 0x2e, 0x0e, 0xd0, 0x1f, 0x15, 0x56, 0x8c, 0x4a, 0x2b,
	0x46, 0x77, 0xa5, 0x15, 0xcc, 0x43, 0xf6, 0xf7, 0x5a, 0xc5, 0xe4, 0x25, 0xb4, 0x0b, 0xa9, 0x55,
	0xb4, 0xf9, 0x51, 0x61, 0x0b, 0xb9, 0x77, 0x8a, 0x3c, 0x83, 0x96, 0xc9, 0x96, 0xbf, 0x8a, 0x95,
	0xa5, 0xe7, 0xa8, 0xfa, 0xa4, 0x9a, 0xb9, 0x80, 0x59, 0x99, 0x27, 0x2f, 0x00, 0xd2, 0x6c, 0x19,
	0xc9, 0xd5, 0xe2, 0x9d, 0xd8, 0xd1, 0x0b, 0x64, 0x57, 0x0e, 0xcd, 0x30, 0xf3, 0xa3, 0xd8, 0x31,
	0x2f, 0x2d, 0x1f, 0xc9, 0x00, 0x9a, 0x3c, 0x0c, 0x35, 0x6d, 0x21, 0xd7, 0x2f, 0xb9, 0xe3, 0x30,
	0xd4, 0x0c, 0x33, 0x64, 0x00, 0x9d, 0x44, 0xd8, 0xad, 0xd2, 0xef, 0xe6, 0xf2, 0xbd, 0xa0, 0x6d,
	0xf4, 0xac, 0x0e, 0x05, 0x4f, 0xe0, 0x51, 0x65, 0xf9, 0x82, 0x47, 0x6b, 0xa5, 0xa5, 0x7d, 0x88,
	0x49, 0x0b, 0x5c, 0x36, 0x1f, 0x5f, 0x9d, 0x05, 0xcf, 0xa0, 0x77, 0x38, 0x55, 0x8d, 0x70, 0x0d,
	0x97, 0xda, 0xf0, 0xdb, 0x64, 0xa5, 0x77, 0xa9, 0x95, 0x2a, 0xb9, 0x3a, 0x0b, 0xfe, 0x6c, 0x40,
	0x6b, 0x3f, 0x55, 0xfe, 0xa2, 0x26, 0x2a, 0x4b, 0xac, 0xde, 0x51, 0x67, 0xe0, 0x0e, 0x3d, 0x56,
	0x86, 0x24, 0x00, 0xff, 0x17, 0xbd, 0xe6, 0x89, 0x7c, 0xcf, 0x73, 0x1d, 0xae, 0x82, 0xc7, 0x8e,
	0x30, 0x32, 0x02, 0x52, 0x8f, 0x79, 0xf4, 0x36, 0x91, 0x96, 0xba, 0xc8, 0x3c, 0x91, 0x21, 0x7d,
	0x68, 0xff, 0xa4, 0x56, 0x3c, 0x92, 0x76, 0x47, 0x9b, 0xc8, 0xaa, 0xe2, 0x3c, 0x37, 0xd3, 0x6a,
	0x23, 0x93, 0x95, 0xa0, 0xe7, 0x45, 0xae, 0x8c, 0xc9, 0x97, 0x70, 0x39, 0xb7, 0x5a, 0x08, 0x9b,
	0x5b, 0x26, 0x8c, 0xa1, 0x17, 0x48, 0x38, 0x06, 0xc9, 0x13, 0x80, 0x99, 0x32, 0x96, 0x47, 0x13,
	0x15, 0x0a, 0xda, 0x42, 0x4a, 0x0d, 0xc9, 0x27, 0x9a, 0xd7, 0xb6, 0x0c, 0x5d, 0xf6, 0xd8, 0x11,
	0x96, 0xd7, 0x98, 0xa8, 0x38, 0x56, 0xc9, 0x94, 0xc7, 0x82, 0x7a, 0xc8, 0xa8, 0x21, 0xc1, 0x1d,
	0x78, 0xd5, 0x9f, 0xa0, 0xbe, 0x34, 0xce, 0x47, 0x96, 0xe6, 0x33, 0xf0, 0xaa, 0xd7, 0xb7, 0x5f,
	0xf9, 0x03, 0x10, 0x3c, 0x05, 0xaf, 0x5a, 0x1c, 0xe2, 0x83, 0x33, 0xc5, 0x7a, 0x3e, 0x73, 0xa6,
	0x79, 0x74, 0x8b, 0x02, 0x97, 0x39, 0xb7, 0xc1, 0x57, 0xd0, 0xcc, 0xa7, 0x25, 0x5d, 0x68, 0xbc,
	0x49, 0x91, 0xe4, 0xb1, 0xc6, 0x9b, 0x94, 0x10, 0x68, 0xa6, 0x4a, 0x5b, 0x24, 0x9e, 0x33, 0x7c,
	0x0e, 0x76, 0xd0, 0x19, 0x67, 0xa1, 0xb4, 0x4c, 0x98, 0x2c, 0xb2, 0xe4, 0x29, 0x34, 0xf3, 0x6b,
	0x66, 0x7f, 0xd2, 0x47, 0xe5, 0x49, 0xeb, 0x77, 0x01, 0x12, 0xc8, 0x63, 0xb8, 0xd0, 0x28, 0xc1,
	0x6a, 0x6d, 0xb6, 0x8f, 0xea, 0xd3, 0xba, 0xff, 0x3e, 0x6d, 0xf0, 0x33, 0xf8, 0xfb, 0xd6, 0xbf,
	0x65, 0xc2, 0xfc, 0x8f, 0xde, 0x3d, 0x38, 0xe7, 0x51, 0xa4, 0xb6, 0xfb, 0xd6, 0x45, 0x10, 0x00,
	0xb4, 0x99, 0x30, 0x42, 0x6f, 0x44, 0x78, 0xf3, 0x57, 0x03, 0x7a, 0x35, 0xdd, 0x38, 0xb3, 0x0f,
	0xf9, 0xa6, 0xef, 0xc8, 0x2b, 0xe8, 0xfe, 0x20, 0x6c, 0xfd, 0x12, 0xba, 0xaa, 0xae, 0xbc, 0xbd,
	0xb8, 0x7f, 0xaa, 0x73, 0x70, 0x46, 0xbe, 0x05, 0x7f, 0xa6, 0x55, 0xaa, 0x0c, 0x8f, 0xf2, 0x04,
	0x39, 0x45, 0xeb, 0xff, 0xa3, 0x5a, 0x70, 0x46, 0xbe, 0x83, 0xcb, 0xd2, 0xe2, 0x54, 0x25, 0x46,
	0x1c, 0x94, 0x35, 0xe7, 0x4f, 0x2a, 0x5f, 0xc3, 0xf5, 0xfc, 0x41, 0x6d, 0xdf, 0x26, 0x3c, 0x27,
	0x8a, 0x10, 0xfb, 0xfe, 0xd7, 0x03, 0xbf, 0x70, 0xc8, 0x4b, 0xf0, 0xb0, 0x05, 0xea, 0x7a, 0x1f,
	0x74, 0x45, 0xd3, 0x4f, 0xb5, 0x5d, 0x16, 0x9f, 0x95, 0x6f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x9b, 0x48, 0x05, 0xa4, 0x7a, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertificateAuthorityClient is the client API for CertificateAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificateAuthorityClient interface {
	GetCertificate(ctx context.Context, in *Reserved, opts ...grpc.CallOption) (*Certificate, error)
	ProposalCert(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Reserved, error)
	AuditResponse(ctx context.Context, in *AuditResult, opts ...grpc.CallOption) (*Reserved, error)
	ShowUnauditedCert(ctx context.Context, in *Reserved, opts ...grpc.CallOption) (CertificateAuthority_ShowUnauditedCertClient, error)
	AuditCert(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*Reserved, error)
}

type certificateAuthorityClient struct {
	cc *grpc.ClientConn
}

func NewCertificateAuthorityClient(cc *grpc.ClientConn) CertificateAuthorityClient {
	return &certificateAuthorityClient{cc}
}

func (c *certificateAuthorityClient) GetCertificate(ctx context.Context, in *Reserved, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/protos.CertificateAuthority/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) ProposalCert(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Reserved, error) {
	out := new(Reserved)
	err := c.cc.Invoke(ctx, "/protos.CertificateAuthority/ProposalCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) AuditResponse(ctx context.Context, in *AuditResult, opts ...grpc.CallOption) (*Reserved, error) {
	out := new(Reserved)
	err := c.cc.Invoke(ctx, "/protos.CertificateAuthority/AuditResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityClient) ShowUnauditedCert(ctx context.Context, in *Reserved, opts ...grpc.CallOption) (CertificateAuthority_ShowUnauditedCertClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CertificateAuthority_serviceDesc.Streams[0], "/protos.CertificateAuthority/ShowUnauditedCert", opts...)
	if err != nil {
		return nil, err
	}
	x := &certificateAuthorityShowUnauditedCertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CertificateAuthority_ShowUnauditedCertClient interface {
	Recv() (*Certificate, error)
	grpc.ClientStream
}

type certificateAuthorityShowUnauditedCertClient struct {
	grpc.ClientStream
}

func (x *certificateAuthorityShowUnauditedCertClient) Recv() (*Certificate, error) {
	m := new(Certificate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certificateAuthorityClient) AuditCert(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*Reserved, error) {
	out := new(Reserved)
	err := c.cc.Invoke(ctx, "/protos.CertificateAuthority/AuditCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateAuthorityServer is the server API for CertificateAuthority service.
type CertificateAuthorityServer interface {
	GetCertificate(context.Context, *Reserved) (*Certificate, error)
	ProposalCert(context.Context, *Certificate) (*Reserved, error)
	AuditResponse(context.Context, *AuditResult) (*Reserved, error)
	ShowUnauditedCert(*Reserved, CertificateAuthority_ShowUnauditedCertServer) error
	AuditCert(context.Context, *AuditRequest) (*Reserved, error)
}

// UnimplementedCertificateAuthorityServer can be embedded to have forward compatible implementations.
type UnimplementedCertificateAuthorityServer struct {
}

func (*UnimplementedCertificateAuthorityServer) GetCertificate(ctx context.Context, req *Reserved) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (*UnimplementedCertificateAuthorityServer) ProposalCert(ctx context.Context, req *Certificate) (*Reserved, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalCert not implemented")
}
func (*UnimplementedCertificateAuthorityServer) AuditResponse(ctx context.Context, req *AuditResult) (*Reserved, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditResponse not implemented")
}
func (*UnimplementedCertificateAuthorityServer) ShowUnauditedCert(req *Reserved, srv CertificateAuthority_ShowUnauditedCertServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowUnauditedCert not implemented")
}
func (*UnimplementedCertificateAuthorityServer) AuditCert(ctx context.Context, req *AuditRequest) (*Reserved, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditCert not implemented")
}

func RegisterCertificateAuthorityServer(s *grpc.Server, srv CertificateAuthorityServer) {
	s.RegisterService(&_CertificateAuthority_serviceDesc, srv)
}

func _CertificateAuthority_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reserved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CertificateAuthority/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).GetCertificate(ctx, req.(*Reserved))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_ProposalCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).ProposalCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CertificateAuthority/ProposalCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).ProposalCert(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_AuditResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).AuditResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CertificateAuthority/AuditResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).AuditResponse(ctx, req.(*AuditResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthority_ShowUnauditedCert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Reserved)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertificateAuthorityServer).ShowUnauditedCert(m, &certificateAuthorityShowUnauditedCertServer{stream})
}

type CertificateAuthority_ShowUnauditedCertServer interface {
	Send(*Certificate) error
	grpc.ServerStream
}

type certificateAuthorityShowUnauditedCertServer struct {
	grpc.ServerStream
}

func (x *certificateAuthorityShowUnauditedCertServer) Send(m *Certificate) error {
	return x.ServerStream.SendMsg(m)
}

func _CertificateAuthority_AuditCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServer).AuditCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.CertificateAuthority/AuditCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServer).AuditCert(ctx, req.(*AuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.CertificateAuthority",
	HandlerType: (*CertificateAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificate",
			Handler:    _CertificateAuthority_GetCertificate_Handler,
		},
		{
			MethodName: "ProposalCert",
			Handler:    _CertificateAuthority_ProposalCert_Handler,
		},
		{
			MethodName: "AuditResponse",
			Handler:    _CertificateAuthority_AuditResponse_Handler,
		},
		{
			MethodName: "AuditCert",
			Handler:    _CertificateAuthority_AuditCert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowUnauditedCert",
			Handler:       _CertificateAuthority_ShowUnauditedCert_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "digital_certificate.proto",
}
